What happens when you initialize a repository? Why do you need to do it?

    A hidden folder for storing git histories is created.
    It needs to be done in order to track subsequent changes made to
    files in the folder where the repository is being initialised.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a container that holds the list of files to be updated
    on the repository from the working directory. This helps in grouping files to be
    commited bsed on the logic of the changes made to them.

How can you use the staging area to make sure you have one commit per logical
change?

    You can do that with the staging area by adding files that have changes that
    make up a logical change to the staging area and commiting them together.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be helpful when you want to try out some features that might not
    be in line with your main plan for your project. This makes it easy to go back to
    the master branch if the feature doesn't work out or work simultaneaously on both
    branches.

How do the diagrams help you visualize the branch structure?

    The diagrams help you in knowing position of commits in relation to branches and
    commits that cannot be reachable from any branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    This applies the changes from the commits of both branches into one.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    Git's automatic merging makes merging easier and less tedious than merging manualy.
    The disadvantage of automatic merging is that resolving complex merge conflicts automatically
    can result to having illogical codes.